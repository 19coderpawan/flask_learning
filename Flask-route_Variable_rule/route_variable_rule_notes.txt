** Notes of variable rules in Flask **


✅ 📌 1️⃣ What are “variables” in Flask routes?
Flask routes can have dynamic parts — called route variables.

Flask route variable rules — i.e., how to define and use variables in your Flask URL routes.

✅ 📌 2️⃣ Defining Route Variables-:
You define route variables using angle brackets (<>) in your @app.route() decorator.
    Imp-: What if you dont pass the parameter here -:
                 @app.route("/home/<username>") # defining route variable in decorator.
                 def home(username): # here whatever value is in the <> brackets passed in the url dynamic part will be passed to fun.
                 return f"Welcom to home page {username}

          -->then the flask will show 404 error not found page. because flask follows the exact pattern as in the route.
          -->however, there are several other way to handle it like -:
                 1.  @app.route("/home")
                   def home():
                   name=request.args.get('name','Guest')
                   return f"hello {name}" 

                 2. @app.route('/user/')
                    @app.route('/user/<username>')
                    def show_user(username=None):
                      if username:
                          return f"Hello, {username}!"
                      else:
                          return "Hello, Guest!"   


✅ 📌 3️⃣ Variable Rules: Default Type (string)
        By default, route variables are strings.

✅ 📌 4️⃣ Specifying Variable Types
         Flask lets you enforce types in routes:

         ✅ Syntax:
         <type:variable>

         ✅ Supported types:

         Type	Example Match
         string	(default) any text
         int	     integers only
         float	floating-point numbers
         path	string with slashes
         uuid	UUID strings



✅ 📌 1️⃣ What is UUID?
       ⭐ UUID = Universally Unique Identifier
       ✅ A 128-bit number designed to be unique across space and time.

       ⭐ Typically represented as a string like:
           "550e8400-e29b-41d4-a716-446655440000"

✅ 📌 2️⃣ What is a UUID object in Python?
       ✅ Python has a built-in uuid module.
       ✅ When you parse or generate a UUID, you get a UUID object.    
            Syntax-:
           import uuid
           my_uuid = uuid.uuid4()
           print(my_uuid)
           print(type(my_uuid))

           output-:
           550e8400-e29b-41d4-a716-446655440000 #uuid
           <class 'uuid.UUID'>                  #type of object.

✅ 📌 4️⃣ Using UUID objects in Flask
         When you define a route like:
         @app.route('/user/<uuid:user_id>')
         def get_user(user_id):
             ...
         ✅ Flask automatically:
         
         1.Extracts the <user_id> from URL.
         
         2.Checks it's valid UUID format.
         
         3.Converts it to a UUID object.

✅ 📌 5️⃣ Why is this useful?
       ✅ You can store UUID objects directly in a database.
       ✅ Database drivers can understand UUID fields.
       ✅ Consistent and safe validation.

        ✅ Used to identify and validate:
        ✅ UUID = globally unique, very hard to guess.

        ✔️ Users
        ✔️ Orders
        ✔️ Products
        ✔️ API keys
        ✔️ Sessions
        ✔️ Password resets

        ✅ Keeps your app safe and organized!

******Example******  -:
      “When a user creates or logs in for the first time, the app gives or stores them under a unique ID to 
       validate them in the future. here the id becomes the primary key for that userdata.”
       ✅ It becomes your user’s identity in the backend
           All their orders will be tied to this ID

           Their session or login tokens will use this ID

           When they update their profile, the backend looks them up using this ID    

✅ 📌 Real-World Analogy
        Imagine:
        "You go to a government office and register yourself."

        ✅ They give you a unique ID (like Aadhaar or Passport Number).
            ✔️ Later, every service you access — voting, taxes, etc. — uses that ID.

             Same with your UUID in a web app.             



       
